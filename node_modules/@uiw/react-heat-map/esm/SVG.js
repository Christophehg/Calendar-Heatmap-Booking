import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["rectSize", "legendCellSize", "space", "monthPlacement", "startDate", "endDate", "rectProps", "rectRender", "legendRender", "value", "weekLabels", "monthLabels", "panelColors", "style"];
import React, { useEffect, useMemo, useState } from 'react';
import { LabelsWeek } from './LabelsWeek';
import { LabelsMonth } from './LabelsMonth';
import { isValidDate, oneDayTime } from './utils';
import Legend from './Legend';
import { Day } from './Day';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function SVG(props) {
  var _ref = props || {},
    {
      rectSize = 11,
      legendCellSize = 11,
      space = 2,
      monthPlacement = 'top',
      startDate = new Date(),
      endDate,
      rectProps,
      rectRender,
      legendRender,
      value = [],
      weekLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      monthLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      panelColors = {
        0: 'var(--rhm-rect, #EBEDF0)',
        8: '#7BC96F',
        4: '#C6E48B',
        12: '#239A3B',
        32: '#196127'
      },
      style
    } = _ref,
    other = _objectWithoutPropertiesLoose(_ref, _excluded);
  var [gridNum, setGridNum] = useState(0);
  var [leftPad, setLeftPad] = useState(!!weekLabels ? 28 : 5);
  var defaultTopPad = monthPlacement === 'top' ? 20 : 5;
  var [topPad, setTopPad] = useState(!!monthLabels ? defaultTopPad : 5);
  var svgRef = /*#__PURE__*/React.createRef();
  useEffect(() => setLeftPad(!!weekLabels ? 28 : 5), [weekLabels]);
  useEffect(() => {
    if (svgRef.current) {
      var width = svgRef.current.clientWidth - leftPad || 0;
      setGridNum(Math.floor(width / (rectSize + space)) || 0);
    }
  }, [rectSize, svgRef, space, leftPad]);
  useEffect(() => {
    setTopPad(!!monthLabels ? defaultTopPad : 5);
  }, [monthLabels]);
  var initStartDate = useMemo(() => {
    if (isValidDate(startDate)) {
      return !startDate.getDay() ? startDate : new Date(startDate.getTime() - startDate.getDay() * oneDayTime);
    } else {
      var newDate = new Date();
      return new Date(newDate.getTime() - newDate.getDay() * oneDayTime);
    }
  }, [startDate]);
  var styl = {
    color: 'var(--rhm-text-color, #24292e)',
    userSelect: 'none',
    display: 'block',
    fontSize: 10
  };
  var monthRectY = monthPlacement === 'top' ? 15 : 15 * 7 + space;
  var legendTopPad = monthPlacement === 'top' ? topPad + rectSize * 8 + 6 : (!!monthLabels ? topPad + rectSize + space : topPad) + rectSize * 8 + 6;
  return /*#__PURE__*/_jsxs("svg", _extends({
    ref: svgRef,
    style: _extends({}, styl, style)
  }, other, {
    children: [legendCellSize !== 0 && /*#__PURE__*/_jsx(Legend, {
      legendRender: legendRender,
      panelColors: panelColors,
      rectSize: rectSize,
      rectY: legendTopPad,
      legendCellSize: legendCellSize,
      leftPad: leftPad,
      topPad: topPad,
      space: space
    }), /*#__PURE__*/_jsx(LabelsWeek, {
      weekLabels: weekLabels,
      rectSize: rectSize,
      space: space,
      topPad: topPad
    }), /*#__PURE__*/_jsx(LabelsMonth, {
      monthLabels: monthLabels,
      rectSize: rectSize,
      space: space,
      leftPad: leftPad,
      colNum: gridNum,
      rectY: monthRectY,
      startDate: initStartDate
    }), /*#__PURE__*/_jsx(Day, {
      transform: "translate(" + leftPad + ", " + topPad + ")",
      gridNum: gridNum,
      initStartDate: initStartDate,
      endDate: endDate,
      rectProps: rectProps,
      rectSize: rectSize,
      rectRender: rectRender,
      panelColors: panelColors,
      value: value,
      space: space
    })]
  }));
}